generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  image         String
  name          String
  email         String  @unique
  emailVerified DateTime?

  isPremium     Boolean @default(false)
  notifications Notification[]
  upvotes       Upvote[]
  accounts      Account[]
  sessions      Session[]
  flashcards    Flashcard[]  // Changed from "products"
  comments      Comment[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt 
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  flashcards  Flashcard[] // Changed from "products"
}

model Flashcard {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  headline    String
  rank        Int
  description String
  front       String     // Field to store the front content of the flashcard
  back        String     // Field to store the back content of the flashcard
  notification Notification[] 
  comments    Comment[]
  upvotes     Upvote[]
  categories  Category[] // Many-to-many relation with Category
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  userId      String

  @@index([userId])
}


model Upvote {
  id          String    @id @default(cuid())
  flashcardId String
  flashcard   Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade) // Changed from "product"
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id             String    @id @default(cuid())
  profilePicture String
  flashcardId    String
  flashcard      Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade) // Changed from "product"
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  body           String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Notification {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  body           String
  profilePicture String
  flashcardId    String
  flashcard      Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade) // Changed from "product"
  commentId      String?
  type           NotificationType
  status         NotificationStatus @default(UNREAD)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum NotificationStatus {
  UNREAD
  READ
}

enum NotificationType {
  UPVOTE
  COMMENT
}
